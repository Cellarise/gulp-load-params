{
  "author": {
    "name": "John Barry"
  },
  "name": "gulp-yadda-steps",
  "description": "A gulp task to generate or update Yadda test step libraries from Gherkin features (natural language test scripts).",
  "version": "0.1.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/Cellarise/gulp-yadda-steps.git"
  },
  "config": {
    "build": "25",
    "buildTimestamp": "2014-08-17T23:32:23.657+10:00",
    "adminEmail": "admin@cellarise.com"
  },
  "main": "./lib",
  "dependencies": {
    "gulp-util": "^3.0.0",
    "yadda": "^0.10.14",
    "dustjs-linkedin": "^2.3.4",
    "dustjs-helpers": "^1.2.0",
    "through2": "^0.5.1",
    "streamifier": "^0.1.0"
  },
  "optionalDependencies": {},
  "devDependencies": {
    "gulp": "^3.8.6",
    "gulp-mocha": "^0.5.2",
    "gulp-load": "^0.1.1",
    "gulp-jsdoc-to-markdown": "^0.1.3",
    "gulp-concat": "^2.3.4",
    "gulp-dust-compile-render": "^0.1.4",
    "gulp-rename": "^1.2.0"
  },
  "readme": "# gulp-yadda-steps\n[![view on npm](http://img.shields.io/npm/v/gulp-yadda-steps.svg)](https://www.npmjs.org/package/gulp-yadda-steps)\n[![npm module downloads per month](http://img.shields.io/npm/dm/gulp-yadda-steps.svg)](https://www.npmjs.org/package/gulp-yadda-steps)\n[![Dependency Status](https://david-dm.org/Cellarise/gulp-yadda-steps.svg)](https://david-dm.org/Cellarise/gulp-yadda-steps)\n\n> A gulp task to generate or update Yadda test step libraries from Gherkin features (natural language test scripts).\n\n\n##Usage \n\nThis gulp task expects a feature file, written in Gherkin syntax, as input, and outputs the matching Yadda test step libraries for this feature file.\n\n### As a gulp task\n\nRequire this package and use as part of your gulp task.\n\n```js\nvar GulpYaddaSteps = require('gulp-yadda-steps');\ngulp.src('local.feature')\n.pipe(new GulpYaddaSteps())\n.pipe(fs.createWriteStream('output.js'));\n```\n\n\n# API\n<a name=\"module_gulp-yadda-steps\"></a>\n#gulp-yadda-steps\nA gulp task to generate or update Yadda test step libraries from Gherkin features (natural language test scripts).\n\n**Params**\n\n- opts `Object` - Task configuration options (see modules Parser and Render for more information)  \n\n**Returns**: `readable-stream/transform`  \n**Example**  \nGiven the feature file:\n\n```markdown\nFeature: Generate test steps from gherkin features\nAs a developer\nI want to be able to generate test step boilerplate code from gherkin features\nSo that I can focus effort on building quality test steps\n\nScenario: Generating test steps\n\nGiven I have a simple feature file\nWhen I read the feature file\nThen a test steps file is generated\n```\n\nWhen you pass the feature file to a `new gulpYaddaSteps()`, and pipe it to a given destination.\n\n```js\nvar gulpYaddaSteps = require('gulp-yadda-steps');\ngulp.src('local.feature')\n.pipe(new gulpYaddaSteps())\n.pipe(fs.createWriteStream('output.js'));\n```\n\nThen you'll get a Yadda style test step library:\n\n```js\n\"use strict\";\nvar English = require('yadda').localisation.English;\n\n/ Feature: Generate test steps from gherkin features /\nmodule.exports = (function() {\n return English.library()\n /Generating test steps/\n .define(\"Given I have a simple feature file\", function(done) {\n     this.assert(false);\n     done();\n })\n .define(\"When I read the feature file\", function(done) {\n     this.assert(false);\n     done();\n })\n .define(\"Then a test steps file is generated\", function(done) {\n     this.assert(false);\n     done();\n });\n})();\n```\n\nNote that the output is a vinyl file which will have the filePath overridden if the libraryBasePath and featureBasePath options are set.\n\n**Members**\n\n* [gulp-yadda-steps](#module_gulp-yadda-steps)\n  * [gulp-yadda-steps.Parser(opts)](#module_gulp-yadda-steps.Parser)\n  * [gulp-yadda-steps.Render(opts)](#module_gulp-yadda-steps.Render)\n\n<a name=\"module_gulp-yadda-steps.Parser\"></a>\n##gulp-yadda-steps.Parser(opts)\nParser is a transform stream requiring a valid feature file.  Parser will load test step libraries tagged in the\nfeature (using @libraries=) and will attempt to load a file with the feature filename and suffix '-steps.js'.\nIf one or more libraries are found they will be used to find step matches in the feature and filter them from the output.\n\n**Params**\n\n- opts `Object` - Parser configuration options  \n  - \\[libraryBasePath\\] `string` - Specifies a path to the base location for the test step libraries.\nE.g. if the base path to the test step library is `Test/unit/steps/` use `path.join(__dirname, './steps/')`\nif the script is running from `'Test/unit'`.\nNote: featureBasePath must also be set for this option to take effect.  \n  - \\[featureBasePath\\] `string` - Specifies a path to the base location for the features.\nNote: libraryBasePath must also be set for this option to take effect.  \n\n**Returns**: `readable-stream/transform`  \n**Example**  \nGiven the feature file:\n\n```markdown\nFeature: Generate test steps from gherkin features\nAs a developer\nI want to be able to generate test step boilerplate code from gherkin features\nSo that I can focus effort on building quality test steps\n\nScenario: Generating test steps\n\nGiven I have a simple feature file\nWhen I read the feature file\nThen a test steps file is generated\n```\n\nWhen you pass the feature file to a `new Parser()`, and pipe it to a given destination.\n\n```js\nvar Parser = require('gulp-yadda-steps').Parser;\ngulp.src('local.feature')\n.pipe(new Parser())\n.pipe(fs.createWriteStream('output.json'));\n```\n\nThen you'll get a Yadda parsed JSON output:\n\n```js\n{\"feature\":{\"title\":\"Generate test steps from gherkin features\",\"annotations\":{},\n\"description\":[\"As a developer\",\"I want to be able to generate test step boilerplate code from gherkin features\",\n\"So that I can focus effort on building quality test steps\"],\n\"scenarios\":[{\"title\":\"Generating test steps\",\n\"annotations\":{},\"description\":[],\n\"steps\":[\"Given I have a simple feature file\",\"When I read the feature file\",\"Then a test steps file is generated\"]}]}}\n```\n\nNote that the output is a vinyl file which will have the filePath overridden if the libraryBasePath and featureBasePath options are set.\n\n<a name=\"module_gulp-yadda-steps.Render\"></a>\n##gulp-yadda-steps.Render(opts)\nRender is a transform stream requiring a yadda parsed JSON file.  Render will load test step libraries tagged in the\nfeature (using @libraries=) and will attempt to load a file with the feature filename and suffix '-steps.js'.\nIf one or more libraries are found they will be used to find step matches in the feature and filter them from the output.\n\n**Params**\n\n- opts `Object` - Parser configuration options  \n  - \\[template_library='../templates/yadda_library.dust'\\] `string` - Specifies a path to a template_library dust file. This file controls the layout of new step libraries.  \n  - \\[template_insertion='../templates/yadda_insert.dust'\\] `string` - Specifies a path to a template_insertion dust file.\nThis file controls the layout for inserting steps into an existing step library.\nThis template should use dust partial `{>steps/}` to insert generated steps from template_steps.  \n  - \\[template_steps='../templates/yadda_steps.dust'\\] `string` - Specifies a path to a template_steps dust file. This file controls the layout and generation of test steps.  \n\n**Returns**: `readable-stream/transform`  \n**Example**  \nGiven a yadda parsed JSON file:\n\n```js\n{\"feature\":{\"title\":\"Generate test steps from gherkin features\",\"annotations\":{},\n\"description\":[\"As a developer\",\"I want to be able to generate test step boilerplate code from gherkin features\",\n\"So that I can focus effort on building quality test steps\"],\n\"scenarios\":[{\"title\":\"Generating test steps\",\n\"annotations\":{},\n\"description\":[],\n\"steps\":[\"Given I have a simple feature file\",\"When I read the feature file\",\"Then a test steps file is generated\"]}]}}\n```\n\n When you pass the yadda parsed JSON file to a `new Render()`, and pipe it to a given destination.\n\n```js\nvar Render = require('gulp-yadda-steps').Render;\ngulp.src('output.json')\n.pipe(new Render())\n.pipe(fs.createWriteStream('output.js'));\n```\n\n Then you'll get a Yadda style test step library:\n\n```js\n\"use strict\";\nvar English = require('yadda').localisation.English;\n\n/ Feature: Generate test steps from gherkin features /\nmodule.exports = (function() {\nreturn English.library()\n /Generating test steps/\n .define(\"Given I have a simple feature file\", function(done) {\n     this.assert(false);\n     done();\n })\n .define(\"When I read the feature file\", function(done) {\n     this.assert(false);\n     done();\n })\n .define(\"Then a test steps file is generated\", function(done) {\n     this.assert(false);\n     done();\n });\n})();\n```\n\n Note that the output is a vinyl file which will have the filePath overridden if the libraryBasePath and featureBasePath options are set.\n\n\n*documented by [jsdoc-to-markdown](https://github.com/75lb/jsdoc-to-markdown)*.\n\n\n# License\n\nMIT License (MIT)\n\nCopyright (c) 2014 John Barry",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Cellarise/gulp-yadda-steps/issues"
  },
  "homepage": "https://github.com/Cellarise/gulp-yadda-steps",
  "_id": "gulp-yadda-steps@0.1.3",
  "_from": "gulp-yadda-steps@^0.1.1"
}
