{
  "author": {
    "name": "John Barry"
  },
  "name": "jshint-reporter-bamboo",
  "description": "A reporter for gulp-jshint which produces a report compatible with Atlassian Bamboo Mocha Test Parser.",
  "version": "0.1.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/Cellarise/jshint-reporter-bamboo.git"
  },
  "config": {
    "build": "11",
    "buildTimestamp": "2014-08-23T00:01:47.328+10:00",
    "adminEmail": "admin@cellarise.com"
  },
  "main": "./lib",
  "dependencies": {
    "gulp-util": "^3.0.0",
    "map-stream": "^0.1.0"
  },
  "optionalDependencies": {},
  "devDependencies": {
    "yadda": "^0.10.14",
    "gulp": "^3.8.6",
    "gulp-load": "^0.1.1",
    "run-sequence": "^0.3.6",
    "gulp-mocha": "^0.5.2",
    "gulp-rename": "^1.2.0",
    "gulp-concat": "^2.3.4",
    "jsdoc-to-markdown": "^0.5.4",
    "gulp-jsdoc-to-markdown": "^0.1.3",
    "gulp-dust-compile-render": "^0.1.4"
  },
  "readme": "# jshint-reporter-bamboo\n[![view on npm](http://img.shields.io/npm/v/jshint-reporter-bamboo.svg)](https://www.npmjs.org/package/jshint-reporter-bamboo)\n[![npm module downloads per month](http://img.shields.io/npm/dm/jshint-reporter-bamboo.svg)](https://www.npmjs.org/package/jshint-reporter-bamboo)\n[![Dependency Status](https://david-dm.org/Cellarise/jshint-reporter-bamboo.svg)](https://david-dm.org/Cellarise/jshint-reporter-bamboo)\n\n> A reporter for gulp-jshint which produces a report compatible with Atlassian Bamboo Mocha Test Parser.\n\n\n##Usage \n\nThis reporter for gulp-jshint requires an object to store the results of each file analysed by jshint.\n\n### As a gulp task\n\nRequire this package and use as part of your gulp-jshint task. Pass an empty 'report' object. The report results will be available on `report.results`.\n\n```js\nvar JshintReporterBamboo = require('jshint-reporter-bamboo');\nvar jshint = require('gulp-jshint');\nvar report = {};\ngulp.src('./lib')\n.pipe(jshint())\n.pipe(new JshintReporterBamboo(report));\n.on('end', function() {\n    fs.writeFileSync('report.json', JSON.stringify(report.results, null, 2), 'utf-8');\n    done();\n});\n```\n\n\n# API\n<a name=\"module_jshint-reporter-bamboo\"></a>\n#jshint-reporter-bamboo\nA reporter for gulp-jshint which produces a report compatible with Atlassian Bamboo Mocha Test Parser.\n\n**Params**\n\n- reportJSON `Object` - object to receive the results of the test.  The report results will be available on `report.results`.  \n- opts `Object` - Task configuration options  \n  - \\[report='mocha'\\] `string` - The test report format to use.  Select from 'mocha' or 'cucumber'.  \n  - \\[suiteName='JSHint'\\] `string` - The test suite name  \n  - \\[suiteDesc=''\\] `string` - The test suite description  \n\n**Type**: `name`  \n**Returns**: `readable-stream/transform`  \n**Example**  \nGiven the Javascript file:\n\n```js\nfor (i=0; i < 10; i = i + 1) {\n    ctr = ctr + i;\n}\n```\n\nWhen you pass the file to a `new JshintReporterBamboo()` using an empty 'report' object.  The report results will be available on `report.results`.\n\n```js\nvar JshintReporterBamboo = require('jshint-reporter-bamboo');\nvar jshint = require('gulp-jshint');\nvar report = {};\ngulp.src('./lib')\n.pipe(jshint())\n.pipe(new JshintReporterBamboo(report));\n.on('end', function() {\n    fs.writeFileSync('report.json', JSON.stringify(report.results, null, 2), 'utf-8');\n    done();\n});\n```\n\nThen you'll get a jshint mocha formatted report:\n\n```js\n{\n  \"stats\": {\n    \"start\": \"2014-08-22T06:04:30.645Z\",\n    \"end\": \"2014-08-22T06:04:30.707Z\",\n    \"suites\": null,\n    \"tests\": null,\n    \"duration\": 62,\n    \"passes\": null\n  },\n  \"failures\": [],\n  \"passes\": [\n    {\n      \"title\": \" index.js\",\n      \"fullTitle\": \" \\\\jshint-reporter-bamboo\\\\lib\\\\index.js\",\n      \"duration\": 62\n    }\n  ],\n  \"skipped\": []\n}\n```\n\nWhen you pass the file to a `new JshintReporterBamboo()` using options report='cucumber'.\n\n```js\nvar JshintReporterBamboo = require('jshint-reporter-bamboo');\nvar jshint = require('gulp-jshint');\nvar report = {};\ngulp.src('./lib')\n.pipe(jshint())\n.pipe(new JshintReporterBamboo(report, {report:'cucumber'}));\n.on('end', function() {\n    fs.writeFileSync('report.json', JSON.stringify(report.results, null, 2), 'utf-8');\n    done();\n});\n```\n\nThen you'll get a jshint cucumber formatted report:\n\n```js\n[\n  {\n    \"id\": \"JSHINT-code-analysis-feature\",\n    \"uri\": \"features/JSHINT-code-analysis.feature\",\n    \"keyword\": \"Feature\",\n    \"name\": \"JSHINT code analysis\",\n    \"line\": 1,\n    \"description\": \"As a developer\\nI want to ensure JSHINT code analysis standards are met\\nSo that my code is conformant with technical standards designed to ensure consistency and readability\",\n    \"elements\": [\n      {\n        \"id\": \"index.js\",\n        \"keyword\": \"Scenario\",\n        \"name\": \"index.js\",\n        \"line\": 3,\n        \"description\": \"\\\\jshint-reporter-bamboo\\\\lib\\\\index.js\",\n        \"type\": \"scenario\",\n        \"steps\": [\n          {\n            \"result\": {\n              \"duration\": 0,\n              \"status\": \"passed\"\n            },\n            \"name\": \"a Javascript file\",\n            \"keyword\": \"Given \",\n            \"line\": 4\n          },\n          {\n            \"result\": {\n              \"duration\": 0,\n              \"status\": \"passed\"\n            },\n            \"name\": \"analysed using JSHint and the repositories default JSHint configuration file\",\n            \"keyword\": \"When \",\n            \"line\": 5\n          },\n          {\n            \"result\": {\n              \"duration\": 0,\n              \"status\": \"passed\"\n            },\n            \"name\": \"the file should meet the defined coding standards\",\n            \"keyword\": \"Then \",\n            \"line\": 6\n          }\n        ]\n      }\n    ]\n  }\n]\n```\n\n\n*documented by [jsdoc-to-markdown](https://github.com/75lb/jsdoc-to-markdown)*.\n\n\n# License\n\nMIT License (MIT)\n\nCopyright (c) 2014 John Barry",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Cellarise/jshint-reporter-bamboo/issues"
  },
  "homepage": "https://github.com/Cellarise/jshint-reporter-bamboo",
  "_id": "jshint-reporter-bamboo@0.1.2",
  "_from": "jshint-reporter-bamboo@^0.1.0"
}
